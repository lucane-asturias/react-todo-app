{"version":3,"sources":["NewTodoForm.js","Todo.js","TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["NewTodoForm","props","state","task","handleChange","bind","handleSubmit","evt","this","setState","target","name","value","preventDefault","createTodo","id","uuidv4","completed","className","onSubmit","htmlFor","type","placeholder","onChange","Component","Todo","isEditing","handleRemove","toggleForm","handleUpdate","handleToggle","removeTodo","updateTodo","toggleTodo","onClick","TodoList","todos","create","remove","update","toggleCompletion","newTodo","filter","t","updatedTask","updatedTodos","map","todo","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.129c648f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport \"./NewTodoForm.css\";\r\n\r\nclass NewTodoForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { task: \"\" };\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n    handleChange(evt) {\r\n        this.setState({\r\n            [evt.target.name]: evt.target.value\r\n        });\r\n    }\r\n    handleSubmit(evt) {\r\n        evt.preventDefault();\r\n        this.props.createTodo({ ...this.state, id: uuidv4(), completed: false });\r\n        this.setState({ task: \"\" });\r\n    }\r\n  render() {\r\n    return (\r\n      <form className=\"NewTodoForm\" onSubmit={this.handleSubmit}>\r\n        <label htmlFor=\"task\">New Todo</label>\r\n        <input \r\n            type=\"text\" \r\n            placeholder=\"New Todo\" \r\n            id=\"task\"   \r\n            name=\"task\"\r\n            value={this.state.task}\r\n            onChange={this.handleChange}\r\n         />\r\n         <button>Add Todo</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewTodoForm;","import React, { Component } from 'react';\r\nimport \"./Todo.css\";\r\n\r\nclass Todo extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isEditing: false,\r\n      task: this.props.task\r\n    }\r\n    this.handleRemove = this.handleRemove.bind(this);\r\n    this.toggleForm = this.toggleForm.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleUpdate = this.handleUpdate.bind(this);\r\n    this.handleToggle = this.handleToggle.bind(this);\r\n  }\r\n  handleRemove() {\r\n    this.props.removeTodo(this.props.id);\r\n  }\r\n  toggleForm() {\r\n    this.setState({ isEditing: !this.state.isEditing }); //setting isEditing to be the opposite\r\n  }\r\n  handleUpdate(evt) {\r\n    evt.preventDefault();\r\n    //take new task data and pass up to parent\r\n    this.props.updateTodo(this.props.id, this.state.task);\r\n    this.setState({ isEditing: false });\r\n  }\r\n  handleChange(evt) {\r\n        this.setState({\r\n            [evt.target.name]: evt.target.value\r\n        });\r\n  }\r\n  handleToggle(evt) {\r\n    this.props.toggleTodo(this.props.id);\r\n  }\r\n  render() {\r\n    let result;\r\n    if (this.state.isEditing) {\r\n      result = (\r\n        <div className=\"Todo\">\r\n          <form className=\"Todo-edit-form\" onSubmit={this.handleUpdate}>\r\n            <input \r\n              type=\"text\"\r\n              value={this.state.task}\r\n              name=\"task\"\r\n              onChange={this.handleChange}\r\n            />\r\n          </form>\r\n        </div>\r\n      )\r\n    } else {\r\n      result = (\r\n        <div className=\"Todo\">\r\n          <li \r\n            className={this.props.completed ? \"Todo-task completed\" : \"Todo-task\"}\r\n            onClick={this.handleToggle}\r\n          >\r\n            {this.props.task}\r\n          </li>\r\n          <div className=\"Todo-buttons\">\r\n            <button onClick={this.toggleForm}>\r\n              <i className=\"fas fa-pen\" />\r\n            </button>\r\n            <button onClick={this.handleRemove}>\r\n              <i className=\"fas fa-trash\" />\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n    return result;\r\n  }\r\n}\r\n\r\nexport default Todo;\r\n","import React, { Component } from \"react\";\r\nimport NewTodoForm from \"./NewTodoForm\";\r\nimport Todo from \"./Todo\";\r\nimport \"./TodoList.css\";\r\n\r\nclass TodoList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            todos: []\r\n        };\r\n        this.create = this.create.bind(this);\r\n        this.remove = this.remove.bind(this);\r\n        this.update = this.update.bind(this);\r\n        this.toggleCompletion = this.toggleCompletion.bind(this);\r\n    }\r\n    create(newTodo) {\r\n        this.setState({\r\n            todos: [...this.state.todos, newTodo] //old state plus new todo\r\n        })\r\n    }\r\n    //making a new array with filter and removing todo given an id\r\n    //filter all todos that are not that id: meaning filter out one with that id\r\n    remove(id) {\r\n        this.setState({\r\n            todos: this.state.todos.filter(t => t.id !== id)\r\n        })\r\n    }\r\n    update(id, updatedTask) {\r\n        const updatedTodos = this.state.todos.map(todo => {\r\n            if (todo.id === id) {\r\n                return { ...todo, task: updatedTask} //existing todo + new task\r\n            }\r\n            return todo; //otherwise return todo unchanged\r\n        });\r\n        this.setState({ todos: updatedTodos});\r\n    }\r\n    toggleCompletion(id) {\r\n        const updatedTodos = this.state.todos.map(todo => {\r\n            if (todo.id === id) {\r\n                return { ...todo, completed: !todo.completed } //set the opposite\r\n            }\r\n            return todo; //otherwise return todo unchanged\r\n        });\r\n        this.setState({ todos: updatedTodos});\r\n    }\r\n  render() {\r\n    const todos = this.state.todos.map(todo => {\r\n        return (\r\n            <Todo \r\n                key={todo.id}\r\n                id={todo.id} \r\n                task={todo.task}\r\n                completed={todo.completed} \r\n                removeTodo={this.remove}\r\n                updateTodo={this.update}\r\n                toggleTodo={this.toggleCompletion}\r\n            />\r\n        );\r\n    });\r\n    return (\r\n      <div className=\"TodoList\">\r\n        <h1>Todo List! \r\n            <span>A Simple React Todo List App</span>\r\n        </h1>\r\n        <ul>{todos}</ul>\r\n        <NewTodoForm createTodo={this.create} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TodoList;\r\n","import React, { Component } from 'react';\nimport TodoList from './TodoList';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <TodoList />\n      </div>\n    )\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}